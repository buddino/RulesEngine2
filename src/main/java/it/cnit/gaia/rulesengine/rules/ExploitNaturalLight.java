package it.cnit.gaia.rulesengine.rules;

import it.cnit.gaia.buildingdb.exceptions.BuildingDatabaseException;
import it.cnit.gaia.rulesengine.model.GaiaRule;
import it.cnit.gaia.rulesengine.model.annotation.LoadMe;
import it.cnit.gaia.rulesengine.model.annotation.LogMe;
import it.cnit.gaia.rulesengine.model.annotation.URI;
import it.cnit.gaia.rulesengine.model.exceptions.ResourceNotFoundException;
import it.cnit.gaia.rulesengine.utils.HardCodedValues;

import java.io.IOException;
import java.text.ParseException;

public class ExploitNaturalLight extends GaiaRule {
	//URIs
	@LogMe
	@LoadMe
	@URI
	public String luminosity_uri;
	//The rule dos not care if you are dealing with internal or external luminosity
	//Just put the URI and the right threshold

	@LogMe
	@LoadMe
	@URI
	public String power_uri;

	@LogMe
	@LoadMe(required = false)
	@URI
	public String occupancy_uri;

	//Thresholds
	@LogMe
	@LoadMe
	public Double luminosity_threshold;
	@LogMe
	@LoadMe
	public Double power_threshold;

	//Measurements
	@LogMe
	public Double luminosity_value;
	@LogMe
	public Double power_value;


	private boolean isOccupied() throws BuildingDatabaseException, ParseException, IOException {
		if (occupancy_uri == null) {
			Long aid = area.aid;
			if (area.type.equals("classrooms")) {
				if (metadataService.isTeaching(school.aid)) {
					return metadataService.isOccupied(aid);
				}
			} else {
				if (!metadataService.isClosed(school.aid)) {
					return metadataService.isOccupied(aid);
				}
			}
			return false;
		} else {
			return measurements.getLatestFor(occupancy_uri).getReading() > HardCodedValues.occupancyThreshold;
		}
	}

	@Override
	public boolean condition() throws ResourceNotFoundException {
		try {
			if (isOccupied()) {
				luminosity_value = measurements.getLatestFor(luminosity_uri).getReading();
				power_value = measurements.getLatestFor(power_uri).getReading();

				return luminosity_value > luminosity_threshold
						&& power_value > power_threshold;
			}
		} catch (Exception e) {
			LOGGER.warn(e.getMessage());
		}
		return false;
	}

}
